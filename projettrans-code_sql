--1. Etude global
--a. Répartition Adhérent / VIP ....
--Constituer un camembert suivant la répartition suivante :
--● VIP : client étant VIP (VIP = 1)
--● NEW_N2 : client ayant adhéré au cours de l'année N-2 (date début adhésion)
--● NEW_N1 : client ayant adhéré au cours de l'année N-1 (date début adhésion)
--● ADHÉRENT : client toujours en cours d'adhésion (date de fin d'adhésion > 2018/01/01)
--● CHURNER : client ayant churner (date de fin d'adhésion < 2018/01/01)
--Note : le critère le plus au-dessus est prioritaire, exemple : un client étant VIP, et ayant adhéré sur l'année N-1 sera compté comme étant VIP

----- Il s'agit de faire compter le nombre de client appartenant à chacune des catégories.
----- A noter que les clients VIP sont identifiables grâce au critère "1".
	select count(distinct idclient) from client where vip = 1
	or;
	select * from client;

	SELECT CASE
				WHEN vip = 1 THEN 'VIP'
				WHEN extract(year from datedebutadhesion) = 2016 THEN 'NEW_N2'
				WHEN extract(year from datedebutadhesion) = 2017 THEN 'NEW_N1'
				WHEN extract(year from datefinadhesion) >= 2018 THEN 'ADHÉRENT'
				WHEN extract(year from datefinadhesion) < 2018 THEN 'CHURNER'
			END AS "Catégorie",
			COUNT(distinct idclient) AS "Nb Clients"
		FROM client
		GROUP BY "Catégorie";
--b. Comportement du CA GLOBAL par client N-2 vs N-1
--Constituer une boîte à moustache pour chaque année (N-2 et N-1) comparant le CA TOTAL (TTC) des clients (sommer les achats par client par années)
-- Somme des achats par client 2016

----- Ici nous calculons les variables (min, max, 1er quartile, médiane, 3ème quartile) nécessaires à la construction des "boxplot" comparant le CA Total 2016 et 2017.
----- Nous avons regrouper les achats par clients et par années, à l'aide de vues :
-- Somme des achats par client 2016
drop view if exists ca_2016;
create view ca_2016 as select client.idclient, sum(tic_totalttc) as CA_client from client 
join entete_ticket
on client.idclient = entete_ticket.idclient
where extract(year from tic_date) = 2016
group by client.idclient
order by CA_client;

-- Somme des achats par client 2017
create view ca_2017 as select client.idclient, sum(tic_totalttc) as CA_client from client 
join entete_ticket
on client.idclient = entete_ticket.idclient
where extract(year from tic_date) = 2017
group by client.idclient
order by CA_client;

-- 2016 : Calcul des min, max et quartiles
WITH bounds AS (
    SELECT (AVG(ca_client) - STDDEV_SAMP(ca_client) * 2) as lower_bound,
           (AVG(ca_client) + STDDEV_SAMP(ca_client) * 2) as upper_bound
    FROM ca_2016
)
select
min(ca_client) as min,
percentile_disc(0.25) within group(order by ca_client) as Q1,
percentile_disc(0.5) within group(order by ca_client) as Q2,
percentile_disc(0.75) within group(order by ca_client) as Q3,
max(ca_client) as max
from ca_2016
WHERE ca_client BETWEEN (SELECT lower_bound FROM bounds) AND (SELECT upper_bound FROM bounds) and ca_client >0;

-- 2017 : Calcul des min, max et quartiles
WITH bounds AS (
    SELECT (AVG(ca_client) - STDDEV_SAMP(ca_client) * 2) as lower_bound,
           (AVG(ca_client) + STDDEV_SAMP(ca_client) * 2) as upper_bound
    FROM ca_2017
)
select
min(ca_client) as min,
percentile_disc(0.25) within group(order by ca_client) as Q1,
percentile_disc(0.5) within group(order by ca_client) as Q2,
percentile_disc(0.75) within group(order by ca_client) as Q3,
max(ca_client) as max
from ca_2017
WHERE ca_client BETWEEN (SELECT lower_bound FROM bounds) AND (SELECT upper_bound FROM bounds) and ca_client >0;

--c. Répartition par âge x sexe
--Constituer un graphique montrant la répartition par âge x sexe sur l'ensemble des clients.

-- Nous avons plusieurs dénominations pour la meme civilite, création nouvelle variable correctement codée (un label = une civilité unique)
ALTER TABLE client ADD civilite_new varchar(10);
UPDATE client set civilite_new = (case 
					when civilite in ('Mr','monsieur','MONSIEUR') then 'Monsieur'
					when civilite in ('Mme','madame','MADAME') then 'Madame'
					else null
	end);
select distinct(civilite_new) from client;
alter table client drop column civilite;
alter table client RENAME COLUMN civilite_new TO civilite;

-- Création d'une ouvelle colonne qui définit l'age du client
ALTER TABLE client ADD AGE integer;
update client set age = DATE_PART('year',current_date) - DATE_PART('year', datenaissance);

--Code de répartition des tranches d'âges x sexe
SELECT CASE
            WHEN age between 0 and 9 THEN '0_9ans'
            WHEN age between 10 and 19 THEN '10_19ans'
            WHEN age between 20 and 29 THEN '20_29ans'
			WHEN age between 30 and 39 THEN '30_39ans'
            WHEN age between 40 and 49 THEN '40_49ans'
			WHEN age between 50 and 59 THEN '50_59ans'
			WHEN age between 60 and 69 THEN '60_69ans'
			WHEN age between 70 and 79 THEN '70_79ans'
			WHEN age between 80 and 89 THEN '80_89ans'
			WHEN age between 90 and 99 THEN '90_99ans'
			else 'others'
        END AS "Âge",
        sum (case
			   when civilite='Monsieur' then 1
			   else 0
		end) as Homme,
		sum (case
			   when civilite='Madame' then 1
			   else 0
		end) as Femme
    FROM client
    GROUP BY "Âge";

-- 2. Etude par magasin
-- a. Résultat par magasin (+1 ligne Total)
-- Constituer un tableau reprenant les données suivantes :
-- ● MAGASIN
-- ● NOMBRE DE CLIENT RATTACHE AU MAGASIN (avec une color_bar en fonction de la quantité)
-- ● Nombre de client actif sur N-2
-- ● Nombre de client actif sur N-1
-- ● % CLIENT N-2 vs N-1 (couleur police : vert si positif, rouge si négatif)
-- ● TOTAL_TTC N-2
-- ● TOTAL_TTC N-1
-- ● Différence entre N-2 et N-1 (couleur police : vert si positif, rouge si négatif)
-- ● indice évolution (icône de satisfaction : positif si %client actif évolue et total TTC aussi, négatif si 
-- diminution des 2 indicateurs, moyen seulement l'un des deux diminue)
-- Note : on effectuera un trie sur l'indice d'évolution (les positifs en haut, les négatifs en bas.

-- Ici nous faisons un focus sur les résultats des magasins en étudiant leur nombre de client et leur CA en 2016 et 2017, ainsi que l'évolution des clients et des revenus entre ces 2 années.

select ref_magasin.magasin, ville, dept,libelleregioncommerciale as "Région",
count (distinct client.idclient) as "Nombre de clients", 
(select count(distinct idclient) from client where extract(year from datefinadhesion) = '2016' group by ref_magasin.magasin) as "Adhérent à N-2",
(select count(distinct idclient) from client where extract(year from datefinadhesion) = '2017' group by ref_magasin.magasin) as "Adhérent à N-1"
from client
inner join ref_magasin 
on client.magasin = ref_magasin.magasin
group by ref_magasin.magasin
;


select client.magasin, sum(entete_ticket.tic_totalttc) from entete_ticket
join client 
on entete_ticket.idclient = client.idclient 
join ref_magasin
on client.magasin = ref_magasin.magasin
where extract(year from tic_date) in (2016,2017)
group by client.magasin;

-- b. Distance CLIENT / MAGASIN
-- Le but étant de calculer la distance qui existe entre le magasin et le client. Les infos disponible pour le moment sont :
-- - la ville du magasin
-- - le code insee du client
-- Il faut donc télécharger les données GPS des villes et code-insee pour pouvoir calculer la distance : https://public.opendatasoft.com/explore/dataset/correspondance-code-insee-code-postal/
-- Une fois les données acquises, il faut lier les données GPS composé de la latitude et de la longitude au client et au magasin. (constituer pour chaque client et chaque magasin 2 colonnes : latitude et longitude).
-- Créer une fonction qui détermine la distance entre 2 points. La fonction doit prendre 4 variable en compte : latitude1, longitude1, latitude2, longitude2
-- pour savoir si la fonction est correct : ​http://www.lexilogos.com/calcul_distances.htm
-- Constituer une représentation (tableau ou graphique --> au choix) représentant le nombre de client par distance : 0 à 5km, 5km à 10km, 10km à 20km, 20km à 50km, plus de 50km

--CREATION TABLE et CHARGEMENT DONNEES GPS
-- Téléchargement des données GPS et intégration dans une table pour pouvoir la croiser avec CLIENT et REF_MAGASIN
drop table IF EXISTS donnees_gps;
create table donnees_gps 
( 
	CODEINSEE varchar(50) primary key,
	CODEPOSTAL varchar(50),
	COMMUNE varchar(50),
	GEO_POINT_2D varchar(50) 
); 
COPY donnees_gps FROM '/Users/ludorobo/Public/Data_Transverse/correspondance-code-insee-code-postal2.csv' CSV HEADER delimiter ';' null '';
select * from donnees_gps;
select * from ref_magasin;

--TRANSFORMATION DONNEES_GPS
-- Nettoyage de la table afin de pouvoir croiser au mieux avec les tables CLIENT et REF_MAGASIN : 
-- Pour cela nous renommons la colonne "Commune" en "Ville"...
ALTER TABLE donnees_gps
RENAME COLUMN commune TO ville;
-- ... "codepostal" en "dept"
ALTER TABLE donnees_gps
RENAME COLUMN codepostal TO dept;

-- Nous conservons l'identifiant du département et modifions le type de la colonne
UPDATE donnees_gps SET dept = CAST(LEFT(dept, 2) AS integer);
ALTER TABLE donnees_gps
ALTER COLUMN dept TYPE integer
USING dept::integer;

-- Ici nous séparons les valeurs latitude et longitude de la colonne "geo_point_2d" en deux colonnes distinctes, suivi de la modification de son type pour faciliter le calcul de distance.
ALTER TABLE donnees_gps ADD latitude float;
ALTER TABLE donnees_gps ADD longitude float;
UPDATE donnees_gps SET latitude =  CAST(split_part(geo_point_2d::TEXT,',', 1) AS float);
UPDATE donnees_gps SET longitude = CAST(split_part(geo_point_2d::TEXT,',', 2) AS float);

-- Enfin Nous harmonisons le nommage des villes en retirant les tirets et harmonisant "ST" vs "SAINT"
ALTER TABLE donnees_gps DROP geo_point_2d;
UPDATE donnees_gps set ville=REPLACE(ville,'-',' ');
UPDATE donnees_gps set ville=REPLACE(ville,'ST','SAINT');

-- REF_MAGASIN - AJOUT DONNEES GPS
-- Nettoyage de la table afin de pouvoir croiser au mieux avec les tables CLIENT et DONNEES_GPS :
-- Ici, nous renommons "libelledepartement" en "dept"
ALTER TABLE ref_magasin
RENAME COLUMN libelledepartement TO dept;

-- Nous renommons "code societe" en "magasin"
ALTER TABLE ref_magasin
RENAME COLUMN codesociete TO magasin;

-- Enfin Nous harmonisons le nommage des villes en retirant les tirets et harmonisant "ST" vs "SAINT"
UPDATE ref_magasin set ville=REPLACE(ville,'-',' ');
UPDATE ref_magasin set ville=REPLACE(ville,'ST','SAINT');
UPDATE ref_magasin set ville=REPLACE(ville,'CEDEX','');

--CREATION VUE DE JOINTURE ENTRE REF_MAGASIN ET DONNEES_GPS
-- La vue de jointure nous permet d'associer des coordonées de localisation à chaque magasin
create view gps_magasin as select magasin, ref_magasin.dept, ref_magasin.ville, latitude, longitude from ref_magasin 
join donnees_gps
on ref_magasin.ville = donnees_gps.ville AND ref_magasin.dept = donnees_gps.dept
;

-- Renommage pour distinguer des coordonées GPS clients et simplifier le calcul de la distance
ALTER TABLE gps_magasin
RENAME COLUMN latitude TO latitude_mag;
ALTER TABLE gps_magasin
RENAME COLUMN longitude TO longitude_mag;

--CREATION VUE DE JOINTURE ENTRE CLIENT ET DONNEES_GPS
-- La vue de jointure nous permet d'associer des coordonées de localisation à chaque client
drop view IF EXISTS gps_client;
create view gps_client as select idclient, client.codeinsee, client.magasin, donnees_gps.ville, latitude, longitude from client 
join donnees_gps
on client.codeinsee = donnees_gps.codeinsee
;

-- Renommage pour distinguer des coordonées GPS magasin et simplifier le calcul de la distance
ALTER TABLE gps_client
RENAME COLUMN latitude TO latitude_client;
ALTER TABLE gps_client
RENAME COLUMN longitude TO longitude_client;

--CREATION TABLE DE JOINTURE ENTRE DONNEES GPS CLIENT ET MAGASIN
-- Cette table nous permet de concatener d'une table unique les coordonnées des clients et du magasin. C'est à partir d'elle que nous calculerons la distance.
create table geo_client_mag as select idclient, latitude_client, longitude_client, gps_client.magasin, latitude_mag, longitude_mag from gps_client 
join gps_magasin
on gps_client.magasin = gps_magasin.magasin
;
select * from geo_client_mag;

-- Ajout d'une colonne pour intégrer la distance qui sépare les clients du magasin
ALTER TABLE geo_client_mag ADD distance_mesuree float;

-- Calcul de la distance -  Nous ne sommes pas parvenus à installer POSTGIS, ni à définir une fonction efficace pour calculer la distance sans cette extension.
UPDATE geo_client_mag SET distance_mesuree = SELECT st_distancesphere(ST_MakePoint(longitude_client, latitude_client),ST_MakePoint(longitude_mag, latitude_mag))
from geo_client_mag;

create extension cube;
CREATE EXTENSION earthdistance CASCADE;
create extension postgis;

-- acos(sin(latitude_client)*sin(latitude_mag)+cos(latitude_client)*cos(latitude_mag)*cos(longitude_mag-longitude_client))*6371

-- Répartition des clients selon la distance qui les séparents du magasin auquel ils sont affiliés : 

SELECT CASE
            WHEN distance_mesuree < 5 THEN '0 à 5km'
            WHEN distance_mesuree >5 and distance_mesuree <10 THEN '5km à 10km'
            WHEN distance_mesuree >10 and distance_mesuree <20 THEN '10km à 20km'
			WHEN distance_mesuree >20 and distance_mesuree <50 THEN '20km à 50km'
            WHEN distance_mesuree >50 THEN 'plus de 50km'
			else 'others'
        END AS "Distance",
        count (idclient)
    FROM geo_client_mag
    GROUP BY "Distance";

-- Etude par univers
-- a. ETUDE PAR UNIVERS
-- Constituer un histogramme N-2 / N-1 évolution du CA par univers
-- b. TOP PAR UNIVERS
-- Afficher le top 5 des familles les plus rentable par univers (en fonction de la marge obtenu) (tableau ou graphique -> au choix)
